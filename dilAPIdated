package main

import (
    "net/http"
    "fmt"
    "encoding/csv"
    "os"
    "bufio"
    "strings"
    "flag"
    "sync"
    "github.com/cheggaaa/pb"
)

var endpoints = []string{
    "/api/",
    "/api/v1/",
    "/api/users/",
    "/api/items/",
    "/api/orders/",
    "/api/auth/",
    "/api/payments/",
    "/api/search/",
    "/api/stats/",
    "/api/notifications/",
}

var sem = make(chan struct{}, 10)

func isAPI(ip string, endpoint string, wg *sync.WaitGroup, writer *csv.Writer, bar *pb.ProgressBar) {
    defer wg.Done()
    resp, err := http.Get("http://" + ip + endpoint)
    if err != nil {
        return
    }
    defer resp.Body.Close()
    if resp.StatusCode == 200 {
        writer.Write([]string{ip, endpoint, resp.StatusCode})
    }
    bar.Increment()
}

func main() {
    var ipsFilePath string
    var csvFilePath string
    flag.StringVar(&ipsFilePath, "i", "ips.txt", "Path to the file containing the IP addresses")
    flag.StringVar(&csvFilePath, "o", "api_endpoints.csv", "Path to the output CSV file")
    flag.Parse()

    file, _ := os.Open(ipsFilePath)
    defer file.Close()
    scanner := bufio.NewScanner(file)

    f, _ := os.Create(csvFilePath)
    defer f.Close()
    writer := csv.NewWriter(f)
    defer writer.Flush()

    var wg sync.WaitGroup
    var total int
    for scanner.Scan() {
        total++
    }
    bar := pb.StartNew(total * len(endpoints))
    file.Seek(0, 0)
    scanner = bufio.NewScanner(file)
    for scanner.Scan() {
        ip := scanner.Text()
        sem <- struct{}{}
        for _, endpoint := range endpoints {
            wg.Add(1)
            go func(ip, endpoint string) {
                isAPI(ip, endpoint, &wg, writer, bar)
                <-sem
            }(ip, endpoint)
        }
    }
    wg.Wait()
    bar.FinishPrint("Scan completed, results written to " + csvFilePath)
